'''Usage
python generate_dataset.py --dataset_path dataset/PolyU_Mulit_UN_GN
'''
import argparse
parser = argparse.ArgumentParser(description="Data Preparation For Blind Image Quality Assessment Network")
parser.add_argument('-id', '--script-id', type=str, default='DataPreparation', 
                    help="ID of this experiment")
parser.add_argument("--is_use_exp", type=bool, default=False,
                    help='convert psnr to np.exp(psnr)')
parser.add_argument("--is_use_fix_minmax", type=bool, default=True,
                    help='number of final dense layer')
parser.add_argument("--max_value", type=int, default=45,
                    help='max value when normalizing with fixed max value')
parser.add_argument("--min_value", type=int, default=8,
                    help='min value when normalizing with fixed max value')                                        
parser.add_argument("--start_position", type=int, default=8,
                    help='start position of each image folder')
parser.add_argument("--dataset_path", type=str, default='dataset/PolyU_Mulit_UN_GN',
                    help="path of image generated by deep image prior") 
parser.add_argument("--output_path", type=str, default='dataset/PolyU_Mulit_UN_GN_PNSR.txt',
                    help="path of psnr txt file to be output")         
args = parser.parse_args()

import os 
import glob
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt


# Mean value
def mean_score(scores):
    si = np.arange(1, 11, 1)
    mean = np.sum(scores * si)
    return mean

# For each psnr, get a set of values with guassian distution using psnr as mean value and 1 as std.
# trans_res is mean value of trans_bins
def transfrom(result, std = 1, num = 10000):
    range_max = 10
    range_min = 1
    trans_res = []
    trans_bins = []
    for x in result:
        if x<0:
            x = 0
        data = np.random.normal(x,std,num)
        data = [round(x) for x in data]
        histgram = np.zeros(10)
        for x in data:
            if x > range_max:
                x = range_max
            elif x < range_min:
                x = range_min
            histgram[int(x)-1] += 1      
        histgram_ = histgram/histgram.sum()    
        trans_bins.append(histgram_)    
        trans_res.append(mean_score(histgram_))
    return trans_res, trans_bins

print('Start up Script')
print("\n================= Data Preparation For Blind Image Quality Assessment Network =================")
print("> Parameters:")
for p, v in zip(args.__dict__.keys(), args.__dict__.values()):
    print('\t{}: {}'.format(p, v))


psnr_files = [file for file in glob.glob(args.dataset_path + '/*.txt') if file.split('_')[-1] == 'real.txt']
print('\n=============Dataset Information==========')
print('Number of image folder:', len(psnr_files))
print('Part of image folder:', psnr_files[:5])
print('Split the folder name:', psnr_files[0].split('/')[-1].split('.')[0])


results = []
print('\n============Process Dataset===============')
for index, psnr_file in enumerate(psnr_files):
    print('Processing: %d/%d %s\t\t'%(index+1, len(psnr_files), psnr_file), end='\r')
    # Such as read: dataset/PolyU_Mulit_UN_GN/Canon80D_8_8_12800_printer_16_real.txt
    # Each line is: file, score
    data = pd.read_csv(psnr_file, sep = ' ', names = ['files','scores'])[args.start_position:] 
    psnr_gts_sm = data['scores'].tolist()
    
    # Convert pnsr to exp(psnr) or not
    if args.is_use_exp:
        psnr_gts_sm_exp = [np.exp(x) for x in psnr_gts_sm]
    else:
        psnr_gts_sm_exp = psnr_gts_sm
    
    # Normalize
    if args.is_use_fix_minmax:
        minVal = np.float64(8)
        maxVal = np.float64(45)
        psnr_gts_sm_exp = (psnr_gts_sm_exp - minVal) / ( maxVal - minVal) *5+2.5
    else:
        minVal = min(psnr_gts_sm_exp)
        maxVal = max(psnr_gts_sm_exp)
        psnr_gts_sm_exp = (psnr_gts_sm_exp - minVal) / ( maxVal - minVal) *5+2.5

    # Trun psnr to ava dataset format with ten possibilities
    trans_res, trans_bins = transfrom(psnr_gts_sm_exp)
    
    # Plot
    if index == 0:
        plot_x = range(1, len(psnr_gts_sm_exp) + 1)
        plt.plot(plot_x, psnr_gts_sm_exp, 'r', label= 'psnr')
        plt.plot(plot_x, trans_res, 'g', label= 'psnr_trans')
        plt.legend()
        plt.show()
    
    # Get new file path
    file_path =  data['files'].tolist()
    new_file_path = [args.dataset_path + '/' + psnr_file.split('/')[-1].split('.')[0]  + '/' + str(int(file.split('/')[-1].split('.')[0])-1) + '.jpg' for index,file in enumerate(file_path)]
    
    # Combine the file path and possibilities
    result = np.column_stack((np.array(new_file_path), trans_bins)).tolist()
    results.extend(result)

# Save the result
results = np.array(results)
print('\n\n============Result===============')
print('Shape of results:', results.shape)
print('Part of results:\n', results[:2])
converted_psnr_path = args.dataset_path + '_PNSR.txt'
np.savetxt(args.dataset_path + '_PNSR.txt', results, delimiter=" ", fmt='%s')
print('Path of converted psnr file:', converted_psnr_path)